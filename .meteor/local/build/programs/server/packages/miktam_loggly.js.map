{"version":3,"sources":["miktam:loggly/logglyServer.js","miktam:loggly/logglyMeteorMethods.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,mC;;AAEA,4B;AACA,6C;AACA,E;;AAEA,G;AACA,0D;AACA,G;AACA,8C;AACA,8B;AACA,E;;AAEA,G;AACA,4C;AACA,E;AACA,oF;AACA,G;;AAEA,yD;AACA,kC;AACA,kC;AACA,U;AACA,+B;AACA,G;AACA,E;;AAEA,sC;AACA,2C;AACA,E;;AAEA,qC;AACA,0C;AACA,E;;AAEA,qC;AACA,0C;AACA,E;;AAEA,sC;AACA,2C;AACA,E;;;;;;;;;;;;;;;;;;ACzCA,I;AACA,4E;AACA,mF;AACA,G;AACA,6B;AACA,yD;AACA,gB;AACA,G;AACA,oE;AACA,e;AACA,E;;AAEA,gB;AACA,mC;AACA,qB;AACA,6B;AACA,K;AACA,I;AACA,qC;AACA,qB;AACA,+B;AACA,K;AACA,I;AACA,oC;AACA,qB;AACA,8B;AACA,K;AACA,I;AACA,qC;AACA,qB;AACA,8B;AACA,K;AACA,I;AACA,sC;AACA,sB;AACA,+B;AACA,K;AACA,G;AACA,G","file":"/packages/miktam_loggly.js","sourcesContent":["var loggly = Npm.require('loggly');\n\nLoggly = function(options) {\n  this.client = loggly.createClient(options);\n};\n\n/**\n * Native wrapper for log method - just pass the arguments\n */\nLoggly.prototype.log = function (param, tag) {\n  this.client.log(param, tag);\n};\n\n/**\n * Set of useful methods to log with the tag\n *\n * @example: Loggly.warn(\"error message\") will add tag `warn` to the `error message`\n */\n\nLoggly.prototype._applyArguments = function (args, tag) {\n  if (args && args.length === 1) {\n    this.client.log(args[0], tag);\n  } else {\n    this.client.log(args, tag);\n  }\n};\n\nLoggly.prototype.trace = function () {\n  this._applyArguments(arguments, 'trace');\n};\n\nLoggly.prototype.info = function () {\n  this._applyArguments(arguments, 'info');\n};\n\nLoggly.prototype.warn = function () {\n  this._applyArguments(arguments, 'warn');\n};\n\nLoggly.prototype.error = function () {\n  this._applyArguments(arguments, 'error');\n};","/***\n * loggerSet - checks to see if the Logger object has been created on server\n * @returns {boolean} - return true if the Logger object has been created on server\n */\nvar loggerSet = function () {\n  if (typeof Logger !== 'undefined' && Logger !== null) {\n    return true;\n  }\n  console.log('Logger object was not created on the Meteor Server');\n  return false;\n};\n\nMeteor.methods({\n  logglyLog: function(param, tag) {\n    if (loggerSet()){\n      Logger.log(param, tag);\n    }\n  },\n  logglyTrace: function(param, tag) {\n    if (loggerSet()){\n      Logger.trace(param, tag);\n    }\n  },\n  logglyInfo: function(param, tag) {\n    if (loggerSet()){\n      Logger.info(param, tag);\n    }\n  },\n  logglyWarn:  function(param, tag) {\n    if (loggerSet()){\n      Logger.warn(param, tag);\n    }\n  },\n  logglyError:  function(param, tag) {\n    if (loggerSet()) {\n      Logger.error(param, tag);\n    }\n  }\n});\n"]}