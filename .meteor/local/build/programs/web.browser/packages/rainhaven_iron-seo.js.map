)]}'
{"version":3,"sources":["rainhaven:iron-seo/rainhaven:iron-seo.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sB;AACA,0B;;AAEA,6C;AACA,yD;AACA,kB;AACA,C;;AAEA,wC;AACA,6C;AACA,gC;AACA,C;;AAEA,0D;AACA,kB;AACA,yB;AACA,qC;AACA,G;AACA,8B;AACA,8C;AACA,G;;AAEA,kC;AACA,gC;AACA,2C;AACA,mC;AACA,mD;AACA,0D;AACA,gB;AACA,mD;AACA,8B;AACA,+C;AACA,wE;AACA,S;AACA,oD;AACA,mC;AACA,mD;AACA,qE;AACA,gB;AACA,mD;AACA,8B;AACA,0D;AACA,wE;AACA,S;AACA,c;AACA,uF;AACA,O;;AAEA,K;AACA,G;AACA,sC;AACA,oC;AACA,+C;AACA,uC;AACA,uD;AACA,8D;AACA,gB;AACA,wG;AACA,S;;AAEA,wD;AACA,uC;AACA,uD;AACA,yE;AACA,gB;AACA,mH;AACA,S;AACA,c;AACA,uF;AACA,O;AACA,K;AACA,G;AACA,C;;AAEA,2C;AACA,6C;;AAEA,uB;;AAEA,yB;AACA,+B;;AAEA,6B;AACA,mC;;AAEA,C;;AAEA,0D;AACA,kC;AACA,4C;;AAEA,6B;AACA,sC;AACA,6B;AACA,G;;AAEA,iC;AACA,2C;AACA,iC;AACA,G;AACA,C;;AAEA,kC;;AAEA,kB;AACA,c;AACA,4C;AACA,iD;AACA,2D;;AAEA,+D;AACA,wD;AACA,U;AACA,6C;AACA,wD;AACA,G;;AAEA,kC;AACA,4B;AACA,gC;AACA,mC;AACA,2C;AACA,Q;AACA,wE;AACA,G;;;AAGA,iB;AACA,G","file":"/packages/rainhaven_iron-seo.js","sourcesContent":["var metaNameTags = {};\nvar metaPropertyTags = {};\n\nvar getSelector = function (tagType, value) {\n  var selector = 'meta[' + tagType + '=\"' + value + '\"]';\n  return selector;\n}\n\nvar hasTag = function (tagType, value) {\n  var selector = getSelector(tagType, value);\n  return $(selector).length > 0;\n}\n\nvar insertNewTags = function (metaNames, metaProperties) {\n  var self = this;\n  for (mn in metaNames) {\n    metaNameTags[mn] = metaNames[mn];\n  }\n  for (mk in metaProperties) {\n    metaPropertyTags[mk] = metaProperties[mk];\n  }\n\n  if (! _.isEmpty(metaNameTags)) {\n    for (prop in metaNameTags) {\n      if (_.isString(metaNameTags[prop])) {\n        if (hasTag('name', prop)) {\n          var selector = getSelector('name', prop);\n          $(selector).attr('content', metaNameTags[prop]);\n        } else {\n          metaTag = document.createElement('meta');\n          metaTag.name = prop;\n          metaTag.content = metaNameTags[prop];\n          document.getElementsByTagName('head')[0].appendChild(metaTag);\n        }\n      } else if (_.isFunction(metaNameTags[prop])) {\n        if (hasTag('name', prop)) {\n          var selector = getSelector('name', prop);\n          $(selector).attr('content', metaNameTags[prop].call(self));\n        } else {\n          metaTag = document.createElement('meta');\n          metaTag.name = prop;\n          metaTag.content = metaNameTags[prop].call(self);\n          document.getElementsByTagName('head')[0].appendChild(metaTag);\n        }\n      } else {\n        console.warn(\"Meta Tag: \" + prop + \" needs to be either a string or function\");\n      }\n\n    }\n  }\n  if (! _.isEmpty(metaPropertyTags)) {\n    for (prop in metaPropertyTags) {\n      if (_.isString(metaPropertyTags[prop])) {\n        if (hasTag('property', prop)) {\n          var selector = getSelector('property', prop);\n          $(selector).attr('content', metaPropertyTags[prop]);\n        } else {\n          $('head').append('<meta property=\"' + prop + '\" content=\"' + metaPropertyTags[prop] + '\" />');\n        }\n\n      } else if (_.isFunction(metaPropertyTags[prop])) {\n        if (hasTag('property', prop)) {\n          var selector = getSelector('property', prop);\n          $(selector).attr('content', metaPropertyTags[prop].call(self));\n        } else {\n          $('head').append('<meta property=\"' + prop + '\" content=\"' + metaPropertyTags[prop].call(self) + '\" />');\n        }\n      } else {\n        console.warn(\"Meta Tag: \" + prop + \" needs to be either a string or function\");\n      }\n    }\n  }\n}\n\nvar removeTag = function (tagType, value) {\n  var selector = getSelector(tagType, value);\n\n  $(selector).remove();\n\n  if (tagType === 'name')\n    delete metaNameTags[value];\n\n  if (tagType === 'property')\n    delete metaPropertyTags[value];\n\n}\n\nvar deleteOldTags = function (metaNames, metaProperties) {\n  var metaNames = metaNames || {};\n  var metaProperties = metaProperties || {};\n\n  for (mnt in metaNameTags) {\n    if (_.isUndefined(metaNames[mnt]))\n      removeTag('name', mnt);\n  }\n\n  for (mpt in metaPropertyTags) {\n    if (_.isUndefined(metaProperties[mpt]))\n      removeTag('property', mpt);\n  }\n}\n\nRouter.onAfterAction(function () {\n\n  var self = this,\n      metaTag,\n      titleTag = this.lookupOption('title'),\n      metaNames = this.lookupOption('metaNames'),\n      metaProperties = this.lookupOption('metaProperties');\n\n  if (_.isEmpty(metaNameTags) && _.isEmpty(metaPropertyTags)) {\n    insertNewTags.call(self, metaNames, metaProperties);\n  } else {\n    deleteOldTags(metaNames, metaProperties);\n    insertNewTags.call(self, metaNames, metaProperties);\n  }\n\n  if (! _.isUndefined(titleTag)) {\n    if(_.isString(titleTag))\n      document.title = titleTag;\n    else if(_.isFunction(titleTag))\n      document.title = titleTag.call(self);\n    else\n      console.warn(\"Title tag needs to be either a string or function\");\n  }\n\n\n  // this.next();\n});\n"]}